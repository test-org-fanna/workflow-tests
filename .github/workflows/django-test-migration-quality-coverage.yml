name: Run Django Unit Test with Coverage, Check the Migration, Run Sonar and Create Coverage Comment

on:
  workflow_dispatch:
  push:

jobs:
  django-unit-test:
    uses: test-org-fanna/.github/.github/workflows/django-test-coverage.yml@main
    with:
      postgres_db: ${{ vars.POSTGRES_DB }}
      postgres_user: ${{ vars.POSTGRES_USER }}
      postgres_host: ${{ vars.POSTGRES_HOST }}
      # python_versions: # Optional, defaults to "['3.11.2']"
      # poetry_versions: # Optional, defaults to "['1.8.4']"
      # working_directory: # Optional, defaults to .
    secrets:
      postgres_password: ${{ secrets.POSTGRES_PASSWORD }}
      private_pypi_url: ${{ secrets.PRIVATE_PYPI_URL }}
      private_pypi_user: ${{ secrets.PRIVATE_PYPI_USER }}
      private_pypi_password: ${{ secrets.PRIVATE_PYPI_PASSWORD }}

  django-migration-test:
    uses: test-org-fanna/.github/.github/workflows/django-migration-test.yml@main
    with:
      postgres_db: ${{ vars.POSTGRES_DB }}
      postgres_user: ${{ vars.POSTGRES_USER }}
      postgres_host: ${{ vars.POSTGRES_HOST }}
      # python_versions: # Optional, defaults to "['3.11.2']"
      # poetry_versions: # Optional, defaults to "['1.8.4']"
      # working_directory: # Optional, defaults to .
    secrets:
      postgres_password: ${{ secrets.POSTGRES_PASSWORD }}

  quality-control-sonar:
    needs: django-unit-test
    uses: test-org-fanna/.github/.github/workflows/quality-control-sonar.yml@main
    # with:
    # coverage_report_name: # Optional, defaults to 'coverage.xml'
    secrets:
      sonar_token: ${{ secrets.SONAR_TOKEN }}

  coverage-comment:
    needs: django-unit-test
    uses: test-org-fanna/.github/.github/workflows/coverage-comment.yml@main
    # with:
    # coverage_report_name: # Optional, defaults to 'coverage.xml'
