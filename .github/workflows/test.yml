name: moi
on:
  push:

jobs:
  unit-tests-with-coverage:
    name: Django Tests With Postgres and Coverage for python version ${{ matrix.python.version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11.2"]
        poetry-version: ["1.8.4"]

    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_DB: ${{ vars.POSTGRES_DB }}
          POSTGRES_USER: ${{ vars.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

#      - name: Install needed apk packages
#        run: apt update && apk add bash && apk add zstd && apk add tar

      - name: Load cache
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            django-test/.testmondata
            django-test/.coverage
            coverage.xml
            django-test/.venv
            /github/home/.local
          key: cache-poetry-${{ matrix.poetry_version }}-python-${{ matrix.python_version }}--${{ hashFiles('**/poetry.lock') }}

      - name: Add cache to path
        if: steps.cache.outputs.cache-hit == 'true'
        run: echo "/github/home/.local/bin" >> $GITHUB_PATH

      - name: Install Poetry V${{ matrix.poetry_version }}
        if: steps.cache.outputs.cache-hit != 'true'
        uses: snok/install-poetry@v1
        with:
          version: ${{ matrix.poetry_version }}
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Poetry; configure and (check) package install
        working-directory: django-test
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          INSTALL_MSG=$(poetry install --dry-run 2>&1 | tail -1)
          if [[ "$INSTALL_MSG" != '' ]]; then
            echo "<h2>:no_entry_sign: Poetry install dry-run failed </h2>" >> $GITHUB_STEP_SUMMARY
            echo "<h3>You should probably run 'poetry lock' </h3>" >> $GITHUB_STEP_SUMMARY
            echo "$INSTALL_MSG" >> $GITHUB_STEP_SUMMARY
            exit 3
          fi
          poetry config repositories.repowered ${{ secrets.private_pypi_url}}
          poetry config http-basic.repowered ${{ secrets.private_pypi_user }} ${{ secrets.private_pypi_password}}
          poetry install --no-interaction --no-root --no-ansi

      - name: Run tests with coverage (${{ vars.PARALLEL_TEST_PROCS }} parallel test procs)
        working-directory: django-test
        run: |
          if [ ${{ env.IS_STANDARD_BRANCH }} == 'true' ]; then
            TEST_MON_FLAG=--testmon-noselect;
          else
            TEST_MON_FLAG=--testmon;
          fi
            echo "Running pytest with flag $TEST_MON_FLAG and ${{vars.PARALLEL_TEST_PROCS}} parallel processes"
          poetry run pytest -v \
            "$TEST_MON_FLAG" --durations=5 -n ${{vars.PARALLEL_TEST_PROCS}} \
            --cov-report=term --cov-report=xml --cov=. --cov-append \
            --md-report --md-report-flavor gfm --md-report-exclude-outcomes passed skipped xpassed --md-report-output test_report.md
        env:
          CI: true
          IS_STANDARD_BRANCH: ${{ endsWith( GITHUB.REF, 'main') || endsWith( GITHUB.REF, 'dev')
            || contains( GITHUB.REF, 'release/') || contains( GITHUB.REF, 'hotfix/') }}
          POSTGRES_DB: ${{ vars.POSTGRES_DB }}
          POSTGRES_USER: ${{ vars.POSTGRES_USER }}
          POSTGRES_HOST: ${{ vars.POSTGRES_HOST }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_PORT: 5432

      - name: Show test failures in the job summary
        working-directory: django-test
        if: failure()
        run: |
          if [ -f test_report.md ]; then
            echo "<summary>:x: Tests Failed</summary>" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            cat test_report.md >> $GITHUB_STEP_SUMMARY
          else
            echo "Tests failed but report file 'test_report.md' was not generated"
          fi      

      - name: Archive test coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage.xml
          path: coverage.xml
          if-no-files-found: 'error'