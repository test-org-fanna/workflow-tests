name: Alembic Migration Check

on:
  push:

jobs:
  test-migrations:
    name: Alembic Migration Check
    runs-on: ubuntu-latest

    services:
      # This service requires that variables and secrets are defined on GitHub (see README)
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_DB: ${{ vars.POSTGRES_DB }}
          POSTGRES_USER: ${{ vars.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup python 3.11.2
        uses: actions/setup-python@v5
        with:
          python-version: 3.11.2

      - name: Load cache
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            django-test.venv
            /home/runner/.local/
          key: cache-python-3.11.2-poetry-1.8.4-${{ hashFiles('**/poetry.lock') }}

      - name: Install Poetry
        if: steps.cache.outputs.cache-hit != 'true'
        uses: snok/install-poetry@v1
        with:
          version: 1.8.4
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Configure Poetry and install packages
        working-directory: django-test
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          poetry config repositories.repowered ${{ secrets.PRIVATE_PYPI_URL}}
          poetry config http-basic.repowered ${{ secrets.PRIVATE_PYPI_USER }} ${{ secrets.PRIVATE_PYPI_PASSWORD}}
          poetry install --no-interaction --no-root --no-ansi

      - name: Check Poetry
        working-directory: django-test
        run: |
          poetry install --no-root --no-ansi --dry-run
#          INSTALL_MSG=$(poetry install --no-root --no-ansi --dry-run 2>&1 | tail -1)
#          UPDATE_MSG=$(poetry update --dry-run | grep -E '([1-9]+\s(install|update|removal))+')
#          if [[ "$INSTALL_MSG" != '' || "$UPDATE_MSG" != '' ]]; then
#            echo "<h2>:no_entry_sign: Poetry check failed </h2>" >> $GITHUB_STEP_SUMMARY
#            echo "" >> $GITHUB_STEP_SUMMARY
#            echo "Install --dry-run output: " >> $GITHUB_STEP_SUMMARY
#            echo "$INSTALL_MSG" >> $GITHUB_STEP_SUMMARY
#            echo "Update --dry-run output: " >> $GITHUB_STEP_SUMMARY
#            echo "$UPDATE_MSG" >> $GITHUB_STEP_SUMMARY
#            exit 3
#          fi

      - name: fail ofzo
        if: failure()
        run: echo "$INSTALL_MSG" >> $GITHUB_STEP_SUMMARY

      - name: Check poetry stuff
        working-directory: django-test
        run: |
          test=$(poetry update --dry-run | grep 'Package')
          echo "$test"
          poetry search alembic

      - name: Check Alembic Migrations
        working-directory: django-test
        id: migration-check
        run: |
          poetry run alembic upgrade head
          echo "migration_msg=$(poetry run alembic check)" >> GITHUB_OUTPUT
        env:
          CI: true
          SQL_DATABASE: ${{ vars.POSTGRES_DB }}
          SQL_USER: ${{ vars.POSTGRES_USER }}
          SQL_HOST: ${{ vars.postgres_host }}
          SQL_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          SQL_PORT: 5432

      - name: Output Migration Failures
        if: failure() && steps.migration-check.outputs.migration_msg != ''
        run: |
          echo "<h2>:no_entry_sign: Migration check failed.</h2>" >> $GITHUB_STEP_SUMMARY
          echo "<h3>The message:</h3>" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.migration-check.outputs.migration_msg }}" >> $GITHUB_STEP_SUMMARY
          
        
