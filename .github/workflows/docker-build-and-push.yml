# ORGANIZATIONAL TEMPLATE: do not alter except for requested input

# Repowered analysis step 1 (ref: WORKFLOWS.MD)
name: Step 1 - Docker; tag, build and push

on:
  workflow_dispatch:
  push:
    branches:
      - dev
      - release/**
      - hotfix/**
      - main
concurrency: production

jobs:
  generate-tag:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      tag: ${{ steps.github-tag.outputs.tag }}
    steps:
      # Checkout the repository with all commit history
      - name: Checkout ${{ github.repository }}
        uses: actions/checkout@v4
        with:
          fetch-depth: '0'

      # Automatically bump and tag with the latest SemVer formatted version.
      - name: Generate and push GitHub tag
        id: github-tag

        uses: anothrNick/github-tag-action@1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WITH_V: true
          PRERELEASE: true
          DRY_RUN: true

  npm-version-change:
    runs-on: ubuntu-latest
    needs: generate-tag
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      # Checks whether a 'package.json' file exists in the repository
      - name: Check file existence
        id: exist-package-json
        uses: andstor/file-existence-action@v3
        with:
            files: "package.json"
      - name: File exists
        if: steps.exist-package-json.outputs.files_exists == 'true'
        # Only runs if all the files exists
        run: echo All files exists!
#        env:
#          test: ${{ env.FILE_PATH }}
#          test2: ${{ github.event.repository.name }}/package.json
#          test3: "*/package.json"
#          test4: "**/package.json"
#        run: |
#          echo "files_exists1=${{ hashFiles(env.FILE_PATH) }}" >> $GITHUB_OUTPUT
#          echo "files_exists2=${{ hashFiles(env.test) }}" >> $GITHUB_OUTPUT
#          echo "files_exists3=${{ hashFiles(env.test2) }}" >> $GITHUB_OUTPUT
#          echo "files_exists4=${{ hashFiles(env.test3) }}" >> $GITHUB_OUTPUT
#          echo "files_exists5=${{ hashFiles(env.test4) }}" >> $GITHUB_OUTPUT
#          echo "files_exists6=${{ hashFiles('package.json') }}" >> $GITHUB_OUTPUT

      # Changes the version to the generated tag from above iff the repository contains a 'package.json' file
#      - name: NPM version change
#        if: steps.exist-package-json.outputs.files_exists1 == 'true'
#        env:
#          test: ${{ steps.exist-package-json.outputs.files_exists1 }}
#        run: echo 'hi'
#        uses: BellCubeDev/update-package-version-by-release-tag@v2
#        with:
#          version: ${{ needs.generate-tag.outputs.tag }}
#          keep-v: true
#          ignore-semver-check: "true" # does not include pre-releases in SemVer checking
#          package-json-path: ${{ env.FILE_LOCATION }}
#          encoding: "utf8"

#  build-and-push:
#    runs-on: ubuntu-latest
#    needs: generate-tag
#    # This strategy enables to tag, build and push multiple Dockerfiles
#    strategy:
#      matrix:
#        # Add your Dockerfile name(s) in the list below
#        #   They always have to start with 'Dockerfile' -> wrong: foo.Dockerfile, correct: Dockerfile.foo
#        #   Standard use is just 'Dockerfile'
#        dockerfile: [ Dockerfile, Dockerfile.name ]
#        # Add secrets (if any) in a secure way to a specific Dockerfile using the structure below:
#        include:
#          - dockerfile: Dockerfile.name
#            first: FIRST_ENV
#            second: SECOND_ENV
#    steps:
#      # Sets the docker image tag according to the file system structure of Dockerhub with versioning
#      # Examples:
#      # - standard Dockerfile: thehubusername/repositoryfoobar:v1.0.1.beta.3
#      # - with name (i.e. Dockerfile.foobar): thehubusername/repositoryfoobar-helloworld:v1.0.1.beta.3
#      # - Repowered example: repowered/platform-django:v1.0.1.beta.3
#      - name: Set docker image tag for '${{ matrix.dockerfile }}'
#        env:
#          hub_repo: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ github.event.repository.name }}
#        run: |
#          DOCKERFILE=${{ matrix.dockerfile }}
#          DOCKERFILE_NAME=$(echo $DOCKERFILE | sed 's/Dockerfile./-/;s/Dockerfile//')
#          echo "IMAGE_TAG=${{ env.hub_repo }}${DOCKERFILE_NAME}:${{ needs.generate-tag.outputs.tag }}" >> $GITHUB_ENV
#
#      #  Log in to the desired docker hub space
#      - name: Login to Docker Hub
#        uses: docker/login-action@v3
#        with:
#          username: ${{ secrets.DOCKER_HUB_USERNAME }}
#          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
#
#      # Build the Dockerfile(s) with the image tag in the correct format and push to the hub
#      - name: Build ${{ matrix.dockerfile }} and push with tag
#        uses: docker/build-push-action@v6
#        # Add ALL the matrix secret(s) (if any) to the environment variable using a multi-line value and enable them below
#        env:
#          SECRETS: "|
#              FIRST_ENV=${{ secrets[matrix.first] }}
#              SECOND_ENV=${{ secrets[matrix.second] }}"
#        with:
#          context: "{{defaultContext}}:./"
#          file: ${{ matrix.dockerfile }}
#          push: ${{ github.event_name != 'pull_request' }}
#          tags: ${{ env.IMAGE_TAG }}
#          secrets: ${{ env.SECRETS }}
